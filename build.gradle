plugins {
    id "groovy"
}

group = "com.pg"
version = "1.0.0"

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://repo.jenkins-ci.org/releases/' }
}

dependencies {
    implementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.6'
    implementation group: 'com.cloudbees', name: 'groovy-cps', version: '1.30'
    implementation group: 'org.jenkins-ci.main', name: 'jenkins-core', version: '2.270'
    implementation group: 'org.jenkinsci.plugins', name: 'pipeline-model-definition', version: '1.7.2'
//    implementation group: 'org.jenkins-ci.plugins', name: 'docker-workflow', version: '1.25'

    testImplementation group: 'org.jenkins-ci.plugins.workflow', name: 'workflow-api', version: '2.40'
    testImplementation group: 'org.jenkins-ci.plugins.workflow', name: 'workflow-step-api', version: '2.23'
    testImplementation group: 'org.jenkins-ci.plugins.workflow', name: 'workflow-basic-steps', version: '2.23'
    testImplementation group: 'com.lesfurets', name: 'jenkins-pipeline-unit', version: '1.1'
    testImplementation group: 'org.jenkins-ci.plugins.workflow', name: 'workflow-aggregator', version: '2.6'
    testImplementation group: 'org.jenkins-ci.plugins.workflow', name: 'workflow-basic-steps', version: '2.23'
    testImplementation group: 'org.jenkins-ci.plugins', name: 'hidden-parameter', version: '0.0.4'
}

sourceSets {
    main {
        groovy {
            srcDirs = ['src', 'vars']
        }
    }

    test {
        groovy {
            srcDirs = ['test']
        }
    }
}
test {

    // delete old test reports
    dependsOn cleanTest

    // don't stop if tests fail
    ignoreFailures = true

    useJUnit {

    }

    // minimize logging
    testLogging.maxGranularity = 0

    // show stdout from tests
    onOutput { dest, event -> print event.message }

    // show test results
    def results = []
    afterTest { desc, result ->
        println "${desc.className.split("\\.")[-1]}: " +
                "${desc.name}: ${result.resultType}"
    }
    afterSuite { desc, result ->
        if (desc.className) { results << result }
    }

    // show summary
    doLast {
        println "Tests summary"
        println "-------------------------------"
        println "Tests: ${results.sum { it.testCount }}" +
                ", Failures: ${results.sum { it.failedTestCount }}" +
                ", Errors: ${results.sum { it.exceptions.size() }}" +
                ", Skipped: ${results.sum { it.skippedTestCount }}"
    }
}